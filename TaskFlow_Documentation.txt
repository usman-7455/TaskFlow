
                                TASKFLOW DOCUMENTATION


BASIC STRUCTURE AND TECHNOLOGIES AND USER SCHEMAS
=================================================

TaskFlow is a modern React-based task management application built with React 18.2.0, Tailwind CSS 3.3.3, and DaisyUI 3.6.3 for styling. The application uses React Router DOM 6.22.3 for navigation and React Hooks for state management. The project follows a component-based architecture with all components stored in the Context directory. The main application entry point is App.jsx which manages user authentication state and routing. The core components include Auth.jsx for login/signup functionality, LandingPage.jsx for the homepage with animated sections, TaskDashborad.jsx for the main task management interface, and Navbar.jsx for responsive navigation. The application uses localStorage for data persistence, storing user credentials, current user sessions, and task data per user. The user schema supports two roles: regular users who can manage their own tasks and admin users who can access and manage tasks for all users. Regular users can create, edit, delete, and complete tasks with priority levels (High, Medium, Low) while admin users have additional capabilities to switch between user accounts and manage tasks globally. The task schema includes properties like unique ID, task description text, priority level, completion status, and timestamp. The application features a glassmorphic design with gradient backgrounds, custom priority sliders, responsive layouts for mobile and desktop, and smooth animations throughout the user interface. The technology stack is lightweight and modern, focusing on client-side functionality with Create React App as the build tool and React Testing Library for testing capabilities.

PROBLEM NO 1
============

During the development of TaskFlow, I encountered a significant challenge with the priority dropdown component positioning and click-outside handling. The PriorityDropdownPortal component was designed to render a custom dropdown for task priority selection, but it was experiencing positioning issues where the dropdown would appear in incorrect locations relative to the trigger button. Additionally, the click-outside functionality wasn't working properly, causing the dropdown to remain open when users clicked elsewhere on the page. This created a poor user experience and made the interface feel unresponsive and buggy.

The root cause was that the dropdown was using absolute positioning without proper coordinate calculations relative to the trigger button. The click-outside detection was also flawed because it wasn't properly accounting for the portal rendering and event bubbling. To overcome this problem, I implemented a coordinate-based positioning system that calculates the exact position of the trigger button and positions the dropdown accordingly. I also refactored the click-outside logic to use a more robust event handling system that properly detects clicks outside both the trigger button and the dropdown portal. The solution involved using useRef hooks to track both elements, implementing proper event listeners with cleanup, and ensuring the dropdown coordinates are recalculated whenever the dropdown opens. This resulted in a much more reliable and user-friendly priority selection interface.

PROBLEM NO 2
============

Another major challenge I faced was implementing proper user authentication state management and session persistence across browser refreshes. The application needed to maintain user login status and admin privileges even when users refreshed the page or closed and reopened the browser. Initially, the authentication state was only stored in React component state, which meant all user data would be lost on page refresh. This created a frustrating experience where users had to log in repeatedly and lost their task data.

The problem was compounded by the need to handle different user roles (admin vs regular users) and ensure that task data was properly associated with the correct user account. The localStorage implementation was also inconsistent, sometimes storing data in different formats or failing to properly parse stored JSON data. To solve this issue, I implemented a comprehensive localStorage strategy that stores user credentials, current user session, admin status, and user-specific task data. I created a centralized state management system in the main App component that initializes user state from localStorage on application startup and updates localStorage whenever the state changes. I also added proper error handling for localStorage operations and implemented data validation to ensure stored data integrity. The solution included automatic cleanup of invalid data and fallback mechanisms for when localStorage is unavailable. This approach ensured that users remain logged in across sessions and their task data persists reliably, significantly improving the overall user experience and making the application feel more professional and reliable.


                                END OF DOCUMENTATION



